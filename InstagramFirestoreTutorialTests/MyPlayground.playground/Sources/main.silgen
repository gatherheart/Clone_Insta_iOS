sil_stage canonical

import Builtin
import Swift
import SwiftShims

struct A {
  @_hasStorage public var a: Int { get set }
  @_hasStorage public var b: Int { get set }
  mutating func s()
  init(a: Int, b: Int)
}

@_hasStorage @_hasInitialValue var a: A { get set }

func samePointer()

func differentPointer()

// a
sil_global hidden @main.a : main.A : $A

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @main.a : main.A                  // id: %2
  %3 = global_addr @main.a : main.A : $*A        // user: %11
  %4 = metatype $@thin A.Type                     // user: %10
  %5 = integer_literal $Builtin.Int64, 1          // user: %6
  %6 = struct $Int (%5 : $Builtin.Int64)          // user: %10
  %7 = integer_literal $Builtin.Int64, 2          // user: %8
  %8 = struct $Int (%7 : $Builtin.Int64)          // user: %10
  // function_ref A.init(a:b:)
  %9 = function_ref @main.A.init(a: Swift.Int, b: Swift.Int) -> main.A : $@convention(method) (Int, Int, @thin A.Type) -> A // user: %10
  %10 = apply %9(%6, %8, %4) : $@convention(method) (Int, Int, @thin A.Type) -> A // user: %11
  store %10 to %3 : $*A                           // id: %11
  %12 = integer_literal $Builtin.Int32, 0         // user: %13
  %13 = struct $Int32 (%12 : $Builtin.Int32)      // user: %14
  return %13 : $Int32                             // id: %14
} // end sil function 'main'

// A.a.getter
sil hidden [transparent] @main.A.a.getter : Swift.Int : $@convention(method) (A) -> Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  %2 = struct_extract %0 : $A, #A.a               // user: %3
  return %2 : $Int                                // id: %3
} // end sil function 'main.A.a.getter : Swift.Int'

// A.a.setter
sil hidden [transparent] @main.A.a.setter : Swift.Int : $@convention(method) (Int, @inout A) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Int, %1 : $*A):
  debug_value %0 : $Int, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*A, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*A    // users: %7, %5
  %5 = struct_element_addr %4 : $*A, #A.a         // user: %6
  store %0 to %5 : $*Int                          // id: %6
  end_access %4 : $*A                             // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.A.a.setter : Swift.Int'

// A.a.modify
sil hidden [transparent] @main.A.a.modify : Swift.Int : $@yield_once @convention(method) (@inout A) -> @yields @inout Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $*A):
  debug_value_addr %0 : $*A, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*A    // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*A, #A.a         // user: %4
  yield %3 : $*Int, resume bb1, unwind bb2        // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*A                             // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*A                             // id: %8
  unwind                                          // id: %9
} // end sil function 'main.A.a.modify : Swift.Int'

// A.b.getter
sil hidden [transparent] @main.A.b.getter : Swift.Int : $@convention(method) (A) -> Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  %2 = struct_extract %0 : $A, #A.b               // user: %3
  return %2 : $Int                                // id: %3
} // end sil function 'main.A.b.getter : Swift.Int'

// A.b.setter
sil hidden [transparent] @main.A.b.setter : Swift.Int : $@convention(method) (Int, @inout A) -> () {
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Int, %1 : $*A):
  debug_value %0 : $Int, let, name "value", argno 1 // id: %2
  debug_value_addr %1 : $*A, var, name "self", argno 2 // id: %3
  %4 = begin_access [modify] [static] %1 : $*A    // users: %7, %5
  %5 = struct_element_addr %4 : $*A, #A.b         // user: %6
  store %0 to %5 : $*Int                          // id: %6
  end_access %4 : $*A                             // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.A.b.setter : Swift.Int'

// A.b.modify
sil hidden [transparent] @main.A.b.modify : Swift.Int : $@yield_once @convention(method) (@inout A) -> @yields @inout Int {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $*A):
  debug_value_addr %0 : $*A, var, name "self", argno 1 // id: %1
  %2 = begin_access [modify] [static] %0 : $*A    // users: %5, %8, %3
  %3 = struct_element_addr %2 : $*A, #A.b         // user: %4
  yield %3 : $*Int, resume bb1, unwind bb2        // id: %4

bb1:                                              // Preds: bb0
  end_access %2 : $*A                             // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %2 : $*A                             // id: %8
  unwind                                          // id: %9
} // end sil function 'main.A.b.modify : Swift.Int'

// A.s()
sil hidden @main.A.s() -> () : $@convention(method) (@inout A) -> () {
// %0 "self"                                      // users: %4, %1
bb0(%0 : $*A):
  debug_value_addr %0 : $*A, var, name "self", argno 1 // id: %1
  %2 = integer_literal $Builtin.Int64, 5          // user: %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %6
  %4 = begin_access [modify] [static] %0 : $*A    // users: %7, %5
  %5 = struct_element_addr %4 : $*A, #A.a         // user: %6
  store %3 to %5 : $*Int                          // id: %6
  end_access %4 : $*A                             // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function 'main.A.s() -> ()'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] @Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function 'Swift.Int.init(_builtinIntegerLiteral: Builtin.IntLiteral) -> Swift.Int'

// A.init(a:b:)
sil hidden @main.A.init(a: Swift.Int, b: Swift.Int) -> main.A : $@convention(method) (Int, Int, @thin A.Type) -> A {
// %0 "$implicit_value"                           // user: %3
// %1 "$implicit_value"                           // user: %3
// %2 "$metatype"
bb0(%0 : $Int, %1 : $Int, %2 : $@thin A.Type):
  %3 = struct $A (%0 : $Int, %1 : $Int)           // user: %4
  return %3 : $A                                  // id: %4
} // end sil function 'main.A.init(a: Swift.Int, b: Swift.Int) -> main.A'

// samePointer()
sil hidden @main.samePointer() -> () : $@convention(thin) () -> () {
bb0:
  %0 = global_addr @main.a : main.A : $*A        // users: %22, %2
  %1 = alloc_stack $()                            // users: %20, %15
  %2 = begin_access [read] [dynamic] %0 : $*A     // users: %3, %4
  %3 = load %2 : $*A                              // user: %6
  end_access %2 : $*A                             // id: %4
  %5 = alloc_stack $A                             // users: %6, %18, %15
  store %3 to %5 : $*A                            // id: %6
  // function_ref closure #1 in samePointer()
  %7 = function_ref @closure #1 (Swift.UnsafePointer<main.A>) -> () in main.samePointer() -> () : $@convention(thin) (UnsafePointer<A>) -> () // user: %8
  %8 = convert_function %7 : $@convention(thin) (UnsafePointer<A>) -> () to $@convention(thin) @noescape (UnsafePointer<A>) -> () // user: %9
  %9 = thin_to_thick_function %8 : $@convention(thin) @noescape (UnsafePointer<A>) -> () to $@noescape @callee_guaranteed (UnsafePointer<A>) -> () // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> () to $@noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error // user: %12
  // function_ref thunk for @callee_guaranteed (@unowned UnsafePointer<A>) -> (@error @owned Error)
  %11 = function_ref @reabstraction thunk helper from @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@out (), @error @owned Swift.Error) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) // user: %12
  %12 = partial_apply [callee_guaranteed] [on_stack] %11(%10) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) // users: %44, %17, %13
  %13 = convert_function %12 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <A, ()> // user: %15
  // function_ref withUnsafePointer<A, B>(to:_:)
  %14 = function_ref @Swift.withUnsafePointer<A, B>(to: A, _: (Swift.UnsafePointer<A>) throws -> B) throws -> B : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error) // user: %15
  try_apply %14<A, ()>(%1, %5, %13) : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error), normal bb1, error bb3 // id: %15

bb1(%16 : $()):                                   // Preds: bb0
  dealloc_stack %12 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) // id: %17
  dealloc_stack %5 : $*A                          // id: %18
  %19 = tuple ()
  dealloc_stack %1 : $*()                         // id: %20
  %21 = alloc_stack $()                           // users: %40, %35
  %22 = begin_access [read] [dynamic] %0 : $*A    // users: %23, %24
  %23 = load %22 : $*A                            // user: %26
  end_access %22 : $*A                            // id: %24
  %25 = alloc_stack $A                            // users: %26, %38, %35
  store %23 to %25 : $*A                          // id: %26
  // function_ref closure #2 in samePointer()
  %27 = function_ref @closure #2 (Swift.UnsafePointer<main.A>) -> () in main.samePointer() -> () : $@convention(thin) (UnsafePointer<A>) -> () // user: %28
  %28 = convert_function %27 : $@convention(thin) (UnsafePointer<A>) -> () to $@convention(thin) @noescape (UnsafePointer<A>) -> () // user: %29
  %29 = thin_to_thick_function %28 : $@convention(thin) @noescape (UnsafePointer<A>) -> () to $@noescape @callee_guaranteed (UnsafePointer<A>) -> () // user: %30
  %30 = convert_function %29 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> () to $@noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error // user: %32
  // function_ref thunk for @callee_guaranteed (@unowned UnsafePointer<A>) -> (@error @owned Error)
  %31 = function_ref @reabstraction thunk helper from @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@out (), @error @owned Swift.Error) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) // user: %32
  %32 = partial_apply [callee_guaranteed] [on_stack] %31(%30) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) // users: %47, %37, %33
  %33 = convert_function %32 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <A, ()> // user: %35
  // function_ref withUnsafePointer<A, B>(to:_:)
  %34 = function_ref @Swift.withUnsafePointer<A, B>(to: A, _: (Swift.UnsafePointer<A>) throws -> B) throws -> B : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error) // user: %35
  try_apply %34<A, ()>(%21, %25, %33) : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error), normal bb2, error bb4 // id: %35

bb2(%36 : $()):                                   // Preds: bb1
  dealloc_stack %32 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) // id: %37
  dealloc_stack %25 : $*A                         // id: %38
  %39 = tuple ()
  dealloc_stack %21 : $*()                        // id: %40
  %41 = tuple ()                                  // user: %42
  return %41 : $()                                // id: %42

bb3(%43 : $Error):                                // Preds: bb0
  dealloc_stack %12 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) // id: %44
  unreachable                                     // id: %45

bb4(%46 : $Error):                                // Preds: bb1
  dealloc_stack %32 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) // id: %47
  unreachable                                     // id: %48
} // end sil function 'main.samePointer() -> ()'

// closure #1 in samePointer()
sil private @closure #1 (Swift.UnsafePointer<main.A>) -> () in main.samePointer() -> () : $@convention(thin) (UnsafePointer<A>) -> () {
// %0 "$0"                                        // users: %9, %1
bb0(%0 : $UnsafePointer<A>):
  debug_value %0 : $UnsafePointer<A>, let, name "$0", argno 1 // id: %1
  %2 = integer_literal $Builtin.Word, 1           // user: %4
  // function_ref _allocateUninitializedArray<A>(_:)
  %3 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %4
  %4 = apply %3<Any>(%2) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %6, %5
  %5 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 0 // user: %11
  %6 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 1 // user: %7
  %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*Any // user: %8
  %8 = init_existential_addr %7 : $*Any, $UnsafePointer<A> // user: %9
  store %0 to %8 : $*UnsafePointer<A>             // id: %9
  // function_ref _finalizeUninitializedArray<A>(_:)
  %10 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %11
  %11 = apply %10<Any>(%5) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %20, %17
  // function_ref default argument 1 of print(_:separator:terminator:)
  %12 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %13
  %13 = apply %12() : $@convention(thin) () -> @owned String // users: %19, %17
  // function_ref default argument 2 of print(_:separator:terminator:)
  %14 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %15
  %15 = apply %14() : $@convention(thin) () -> @owned String // users: %18, %17
  // function_ref print(_:separator:terminator:)
  %16 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %17
  %17 = apply %16(%11, %13, %15) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %15 : $String                     // id: %18
  release_value %13 : $String                     // id: %19
  release_value %11 : $Array<Any>                 // id: %20
  %21 = tuple ()                                  // user: %22
  return %21 : $()                                // id: %22
} // end sil function 'closure #1 (Swift.UnsafePointer<main.A>) -> () in main.samePointer() -> ()'

// _allocateUninitializedArray<A>(_:)
sil [serialized] [always_inline] [_semantics "array.uninitialized_intrinsic"] @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)

// _finalizeUninitializedArray<A>(_:)
sil shared_external [serialized] [readnone] [_semantics "array.finalize_intrinsic"] @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <Element> (@owned Array<Element>) -> @owned Array<Element> {
// %0                                             // user: %2
bb0(%0 : $Array<Element>):
  %1 = alloc_stack $Array<Element>                // users: %6, %5, %4, %2
  store %0 to %1 : $*Array<Element>               // id: %2
  // function_ref Array._endMutation()
  %3 = function_ref @Swift.Array._endMutation() -> () : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> () // user: %4
  %4 = apply %3<Element>(%1) : $@convention(method) <τ_0_0> (@inout Array<τ_0_0>) -> ()
  %5 = load %1 : $*Array<Element>                 // user: %7
  dealloc_stack %1 : $*Array<Element>             // id: %6
  return %5 : $Array<Element>                     // id: %7
} // end sil function 'Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A]'

// default argument 1 of print(_:separator:terminator:)
sil shared_external [serialized] @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 " "                    // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()'

// default argument 2 of print(_:separator:terminator:)
sil shared_external [serialized] @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "\n"                   // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function 'default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> ()'

// print(_:separator:terminator:)
sil @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()

// thunk for @callee_guaranteed (@unowned UnsafePointer<A>) -> (@error @owned Error)
sil shared [transparent] [serializable] [reabstraction_thunk] @reabstraction thunk helper from @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@out (), @error @owned Swift.Error) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) {
// %1                                             // user: %3
// %2                                             // user: %3
bb0(%0 : $*(), %1 : $UnsafePointer<A>, %2 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error):
  try_apply %2(%1) : $@noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error, normal bb1, error bb2 // id: %3

bb1(%4 : $()):                                    // Preds: bb0
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6

// %7                                             // user: %8
bb2(%7 : $Error):                                 // Preds: bb0
  throw %7 : $Error                               // id: %8
} // end sil function 'reabstraction thunk helper from @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@out (), @error @owned Swift.Error)'

// withUnsafePointer<A, B>(to:_:)
sil [serialized] @Swift.withUnsafePointer<A, B>(to: A, _: (Swift.UnsafePointer<A>) throws -> B) throws -> B : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error)

// closure #2 in samePointer()
sil private @closure #2 (Swift.UnsafePointer<main.A>) -> () in main.samePointer() -> () : $@convention(thin) (UnsafePointer<A>) -> () {
// %0 "$0"                                        // users: %9, %1
bb0(%0 : $UnsafePointer<A>):
  debug_value %0 : $UnsafePointer<A>, let, name "$0", argno 1 // id: %1
  %2 = integer_literal $Builtin.Word, 1           // user: %4
  // function_ref _allocateUninitializedArray<A>(_:)
  %3 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %4
  %4 = apply %3<Any>(%2) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %6, %5
  %5 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 0 // user: %11
  %6 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 1 // user: %7
  %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*Any // user: %8
  %8 = init_existential_addr %7 : $*Any, $UnsafePointer<A> // user: %9
  store %0 to %8 : $*UnsafePointer<A>             // id: %9
  // function_ref _finalizeUninitializedArray<A>(_:)
  %10 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %11
  %11 = apply %10<Any>(%5) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %20, %17
  // function_ref default argument 1 of print(_:separator:terminator:)
  %12 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %13
  %13 = apply %12() : $@convention(thin) () -> @owned String // users: %19, %17
  // function_ref default argument 2 of print(_:separator:terminator:)
  %14 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %15
  %15 = apply %14() : $@convention(thin) () -> @owned String // users: %18, %17
  // function_ref print(_:separator:terminator:)
  %16 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %17
  %17 = apply %16(%11, %13, %15) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %15 : $String                     // id: %18
  release_value %13 : $String                     // id: %19
  release_value %11 : $Array<Any>                 // id: %20
  %21 = tuple ()                                  // user: %22
  return %21 : $()                                // id: %22
} // end sil function 'closure #2 (Swift.UnsafePointer<main.A>) -> () in main.samePointer() -> ()'

// differentPointer()
sil hidden @main.differentPointer() -> () : $@convention(thin) () -> () {
bb0:
  %0 = global_addr @main.a : main.A : $*A        // users: %24, %19, %9
  %1 = alloc_stack $()                            // users: %16, %11
  // function_ref closure #1 in differentPointer()
  %2 = function_ref @closure #1 (Swift.UnsafePointer<main.A>) -> () in main.differentPointer() -> () : $@convention(thin) (UnsafePointer<A>) -> () // user: %3
  %3 = convert_function %2 : $@convention(thin) (UnsafePointer<A>) -> () to $@convention(thin) @noescape (UnsafePointer<A>) -> () // user: %4
  %4 = thin_to_thick_function %3 : $@convention(thin) @noescape (UnsafePointer<A>) -> () to $@noescape @callee_guaranteed (UnsafePointer<A>) -> () // user: %5
  %5 = convert_function %4 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> () to $@noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error // user: %7
  // function_ref thunk for @callee_guaranteed (@unowned UnsafePointer<A>) -> (@error @owned Error)
  %6 = function_ref @reabstraction thunk helper from @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@out (), @error @owned Swift.Error) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) // user: %7
  %7 = partial_apply [callee_guaranteed] [on_stack] %6(%5) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) // users: %46, %13, %8
  %8 = convert_function %7 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <A, ()> // user: %11
  %9 = begin_access [modify] [dynamic] %0 : $*A   // users: %14, %11
  // function_ref withUnsafePointer<A, B>(to:_:)
  %10 = function_ref @Swift.withUnsafePointer<A, B>(to: inout A, _: (Swift.UnsafePointer<A>) throws -> B) throws -> B : $@convention(thin) <τ_0_0, τ_0_1> (@inout τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error) // user: %11
  try_apply %10<A, ()>(%1, %9, %8) : $@convention(thin) <τ_0_0, τ_0_1> (@inout τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error), normal bb1, error bb3 // id: %11

bb1(%12 : $()):                                   // Preds: bb0
  dealloc_stack %7 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) // id: %13
  end_access %9 : $*A                             // id: %14
  %15 = tuple ()
  dealloc_stack %1 : $*()                         // id: %16
  %17 = integer_literal $Builtin.Int64, 2         // user: %18
  %18 = struct $Int (%17 : $Builtin.Int64)        // user: %21
  %19 = begin_access [modify] [dynamic] %0 : $*A  // users: %22, %20
  %20 = struct_element_addr %19 : $*A, #A.a       // user: %21
  store %18 to %20 : $*Int                        // id: %21
  end_access %19 : $*A                            // id: %22
  %23 = alloc_stack $()                           // users: %42, %37
  %24 = begin_access [read] [dynamic] %0 : $*A    // users: %25, %26
  %25 = load %24 : $*A                            // user: %28
  end_access %24 : $*A                            // id: %26
  %27 = alloc_stack $A                            // users: %28, %40, %37
  store %25 to %27 : $*A                          // id: %28
  // function_ref closure #2 in differentPointer()
  %29 = function_ref @closure #2 (Swift.UnsafePointer<main.A>) -> () in main.differentPointer() -> () : $@convention(thin) (UnsafePointer<A>) -> () // user: %30
  %30 = convert_function %29 : $@convention(thin) (UnsafePointer<A>) -> () to $@convention(thin) @noescape (UnsafePointer<A>) -> () // user: %31
  %31 = thin_to_thick_function %30 : $@convention(thin) @noescape (UnsafePointer<A>) -> () to $@noescape @callee_guaranteed (UnsafePointer<A>) -> () // user: %32
  %32 = convert_function %31 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> () to $@noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error // user: %34
  // function_ref thunk for @callee_guaranteed (@unowned UnsafePointer<A>) -> (@error @owned Error)
  %33 = function_ref @reabstraction thunk helper from @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@error @owned Swift.Error) to @escaping @callee_guaranteed (@unowned Swift.UnsafePointer<main.A>) -> (@out (), @error @owned Swift.Error) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) // user: %34
  %34 = partial_apply [callee_guaranteed] [on_stack] %33(%32) : $@convention(thin) (UnsafePointer<A>, @noescape @callee_guaranteed (UnsafePointer<A>) -> @error Error) -> (@out (), @error Error) // users: %49, %39, %35
  %35 = convert_function %34 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <A, ()> // user: %37
  // function_ref withUnsafePointer<A, B>(to:_:)
  %36 = function_ref @Swift.withUnsafePointer<A, B>(to: A, _: (Swift.UnsafePointer<A>) throws -> B) throws -> B : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error) // user: %37
  try_apply %36<A, ()>(%23, %27, %35) : $@convention(thin) <τ_0_0, τ_0_1> (@in_guaranteed τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error), normal bb2, error bb4 // id: %37

bb2(%38 : $()):                                   // Preds: bb1
  dealloc_stack %34 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) // id: %39
  dealloc_stack %27 : $*A                         // id: %40
  %41 = tuple ()
  dealloc_stack %23 : $*()                        // id: %42
  %43 = tuple ()                                  // user: %44
  return %43 : $()                                // id: %44

bb3(%45 : $Error):                                // Preds: bb0
  dealloc_stack %7 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) // id: %46
  unreachable                                     // id: %47

bb4(%48 : $Error):                                // Preds: bb1
  dealloc_stack %34 : $@noescape @callee_guaranteed (UnsafePointer<A>) -> (@out (), @error Error) // id: %49
  unreachable                                     // id: %50
} // end sil function 'main.differentPointer() -> ()'

// closure #1 in differentPointer()
sil private @closure #1 (Swift.UnsafePointer<main.A>) -> () in main.differentPointer() -> () : $@convention(thin) (UnsafePointer<A>) -> () {
// %0 "$0"                                        // users: %9, %1
bb0(%0 : $UnsafePointer<A>):
  debug_value %0 : $UnsafePointer<A>, let, name "$0", argno 1 // id: %1
  %2 = integer_literal $Builtin.Word, 1           // user: %4
  // function_ref _allocateUninitializedArray<A>(_:)
  %3 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %4
  %4 = apply %3<Any>(%2) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %6, %5
  %5 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 0 // user: %11
  %6 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 1 // user: %7
  %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*Any // user: %8
  %8 = init_existential_addr %7 : $*Any, $UnsafePointer<A> // user: %9
  store %0 to %8 : $*UnsafePointer<A>             // id: %9
  // function_ref _finalizeUninitializedArray<A>(_:)
  %10 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %11
  %11 = apply %10<Any>(%5) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %20, %17
  // function_ref default argument 1 of print(_:separator:terminator:)
  %12 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %13
  %13 = apply %12() : $@convention(thin) () -> @owned String // users: %19, %17
  // function_ref default argument 2 of print(_:separator:terminator:)
  %14 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %15
  %15 = apply %14() : $@convention(thin) () -> @owned String // users: %18, %17
  // function_ref print(_:separator:terminator:)
  %16 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %17
  %17 = apply %16(%11, %13, %15) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %15 : $String                     // id: %18
  release_value %13 : $String                     // id: %19
  release_value %11 : $Array<Any>                 // id: %20
  %21 = tuple ()                                  // user: %22
  return %21 : $()                                // id: %22
} // end sil function 'closure #1 (Swift.UnsafePointer<main.A>) -> () in main.differentPointer() -> ()'

// withUnsafePointer<A, B>(to:_:)
sil [serialized] @Swift.withUnsafePointer<A, B>(to: inout A, _: (Swift.UnsafePointer<A>) throws -> B) throws -> B : $@convention(thin) <τ_0_0, τ_0_1> (@inout τ_0_0, @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafePointer<τ_0_0>) -> (@out τ_0_1, @error Error) for <τ_0_0, τ_0_1>) -> (@out τ_0_1, @error Error)

// closure #2 in differentPointer()
sil private @closure #2 (Swift.UnsafePointer<main.A>) -> () in main.differentPointer() -> () : $@convention(thin) (UnsafePointer<A>) -> () {
// %0 "$0"                                        // users: %9, %1
bb0(%0 : $UnsafePointer<A>):
  debug_value %0 : $UnsafePointer<A>, let, name "$0", argno 1 // id: %1
  %2 = integer_literal $Builtin.Word, 1           // user: %4
  // function_ref _allocateUninitializedArray<A>(_:)
  %3 = function_ref @Swift._allocateUninitializedArray<A>(Builtin.Word) -> ([A], Builtin.RawPointer) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %4
  %4 = apply %3<Any>(%2) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %6, %5
  %5 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 0 // user: %11
  %6 = tuple_extract %4 : $(Array<Any>, Builtin.RawPointer), 1 // user: %7
  %7 = pointer_to_address %6 : $Builtin.RawPointer to [strict] $*Any // user: %8
  %8 = init_existential_addr %7 : $*Any, $UnsafePointer<A> // user: %9
  store %0 to %8 : $*UnsafePointer<A>             // id: %9
  // function_ref _finalizeUninitializedArray<A>(_:)
  %10 = function_ref @Swift._finalizeUninitializedArray<A>(__owned [A]) -> [A] : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // user: %11
  %11 = apply %10<Any>(%5) : $@convention(thin) <τ_0_0> (@owned Array<τ_0_0>) -> @owned Array<τ_0_0> // users: %20, %17
  // function_ref default argument 1 of print(_:separator:terminator:)
  %12 = function_ref @default argument 1 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %13
  %13 = apply %12() : $@convention(thin) () -> @owned String // users: %19, %17
  // function_ref default argument 2 of print(_:separator:terminator:)
  %14 = function_ref @default argument 2 of Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) () -> @owned String // user: %15
  %15 = apply %14() : $@convention(thin) () -> @owned String // users: %18, %17
  // function_ref print(_:separator:terminator:)
  %16 = function_ref @Swift.print(_: Any..., separator: Swift.String, terminator: Swift.String) -> () : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %17
  %17 = apply %16(%11, %13, %15) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %15 : $String                     // id: %18
  release_value %13 : $String                     // id: %19
  release_value %11 : $Array<Any>                 // id: %20
  %21 = tuple ()                                  // user: %22
  return %21 : $()                                // id: %22
} // end sil function 'closure #2 (Swift.UnsafePointer<main.A>) -> () in main.differentPointer() -> ()'

// Array._endMutation()
sil shared_external [serialized] [_semantics "array.end_mutation"] @Swift.Array._endMutation() -> () : $@convention(method) <Element> (@inout Array<Element>) -> () {
// %0                                             // users: %9, %1
bb0(%0 : $*Array<Element>):
  %1 = struct_element_addr %0 : $*Array<Element>, #Array._buffer // user: %2
  %2 = struct_element_addr %1 : $*_ArrayBuffer<Element>, #_ArrayBuffer._storage // user: %3
  %3 = struct_element_addr %2 : $*_BridgeStorage<__ContiguousArrayStorageBase>, #_BridgeStorage.rawValue // user: %4
  %4 = load %3 : $*Builtin.BridgeObject           // user: %5
  %5 = end_cow_mutation %4 : $Builtin.BridgeObject // user: %6
  %6 = struct $_BridgeStorage<__ContiguousArrayStorageBase> (%5 : $Builtin.BridgeObject) // user: %7
  %7 = struct $_ArrayBuffer<Element> (%6 : $_BridgeStorage<__ContiguousArrayStorageBase>) // user: %8
  %8 = struct $Array<Element> (%7 : $_ArrayBuffer<Element>) // user: %9
  store %8 to %0 : $*Array<Element>               // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function 'Swift.Array._endMutation() -> ()'

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] @Swift.String.init(_builtinStringLiteral: Builtin.RawPointer, utf8CodeUnitCount: Builtin.Word, isASCII: Builtin.Int1) -> Swift.String : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String



// Mappings from '#fileID' to '#filePath':
//   'main/main.swift' => 'main.swift'


